---
interface Props {
	variant?: 'offset' | 'small';
}

const { variant } = Astro.props;
---

<ul class:list={['grid', { offset: variant === 'offset', small: variant === 'small' }]}>
	<slot />
</ul>

<style>
    .grid {
        display: grid;
        grid-template-columns: 1fr; /* Single column spanning full width */
        grid-auto-rows: auto; /* Rows adjust based on content */
        gap: 1rem; /* Maintain spacing between rows */
        list-style: none;
        padding: 0;
        width: 100%; /* Ensure grid spans full width */
    }

    .grid.small {
        display: grid; /* Use grid instead of flex */
        grid-template-columns: 1fr; /* Single column for small variant */
        grid-auto-rows: auto;
        gap: 1rem;
    }

	@media (min-width: 50em) {
        .grid {
            grid-template-columns: 1fr; /* Ensure single column on larger screens */
            gap: 2rem; /* Optional: Adjust gap for larger screens */
        }

        .grid.offset {
            --row-offset: 0; /* Remove offset effect */
            padding-bottom: 0;
        }

        .grid.offset > :global(:nth-child(odd)) {
            transform: none; /* Remove staggered effect */
        }

        .grid.small {
            grid-template-columns: 1fr; /* Ensure single column for small variant */
            gap: 2rem;
        }

        .grid.small > :global(*) {
            flex-basis: auto; /* Remove fixed width for items */
        }
    }
</style>
